import { useState } from "react";
import * as XLSX from "xlsx";
import Head from "next/head";
import { Geist, Geist_Mono } from "next/font/google";
import styles from "@/styles/Home.module.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function Home() {
  const [data, setData] = useState([]);

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const binaryStr = e.target.result;
      const workbook = XLSX.read(binaryStr, { type: "binary" });

      // Supondo que você queira ler a primeira planilha
      const worksheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

      // Remove o cabeçalho e define o estado com os dados
      const rows = jsonData;
      setData(rows);
    };
    reader.readAsBinaryString(file);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${styles.page} ${geistSans.variable} ${geistMono.variable}`}
      >
        <main className={styles.main}>
          <div>
            <h1>Upload de Arquivo XLSX</h1>
            <br />
            <input
              type="file"
              accept=".xlsx, .xls"
              onChange={handleFileUpload}
            />
            <br />
            <br />
            <h2>Dados do Arquivo:</h2>
            <br />
            {data?.length > 0 && (
              <table border={1}>
                <thead>
                  <tr>
                    {data[0].map(
                      (item, index) => index < 2 && <th key={item}>{item}</th>
                    )}
                  </tr>
                </thead>
                <tbody>
                  {data
                    .slice(1)
                    .map(
                      (row, index) =>
                        row?.length > 0 && (
                          <tr key={index}>
                            {row.map(
                              (row, colIndex) =>
                                colIndex < 2 && <td key={colIndex}>{row}</td>
                            )}
                          </tr>
                        )
                    )}
                </tbody>
              </table>
            )}
          </div>
        </main>
      </div>
    </>
  );
}
